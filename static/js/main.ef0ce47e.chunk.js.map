{"version":3,"sources":["Header.js","ConversionInput.js","ConversionResult.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","PureComponent","ConversionInput","handleChange","event","_this","props","textChange","class","onChange","this","ConversionResult","outputGurmukhi","outputDevnagri","outputEnglish","outputShahmukhi","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","setState","gurmukhiText","anvaad","target","value","shahmukhiText","state","devnagriText","latinText","Header_Header","ConversionInput_ConversionInput","ConversionResult_ConversionResult","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAGqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,sCAJ4BC,IAAMC,gBCErBC,oNAKnBC,aAAe,SAAAC,GACbC,EAAKC,MAAMC,WAAWH,4EAItB,OACER,EAAAC,EAAAC,cAAA,OAAKU,MAAM,YACTZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,YAAUW,SAAUC,KAAKP,wBAbQH,IAAMC,gBCF9BU,0LAEjB,OACEf,EAAAC,EAAAC,cAAA,OAAKU,MAAM,YACTZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACdW,KAAKJ,MAAMM,eACZhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACdW,KAAKJ,MAAMO,gBAEZjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACdW,KAAKJ,MAAMQ,eAEZlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACdW,KAAKJ,MAAMM,gBAEZhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACdW,KAAKJ,MAAMM,gBAEZhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACdW,KAAKJ,MAAMS,0BAnB0Bf,IAAMC,gBCI/Be,cACnB,SAAAA,EAAYV,GAAO,IAAAD,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAP,KAAAM,IACjBX,EAAAY,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAX,KAAMJ,KASRgB,kBAAoB,SAAAlB,GAClBC,EAAKkB,SAAS,CACZC,aAAcC,UAAerB,EAAMsB,OAAOC,OAE1CC,cAAeH,WAAgBrB,EAAMsB,OAAOC,MAAO,gBAZrDtB,EAAKwB,MAAQ,CACXL,aAAc,GACdM,aAAc,GACdF,cAAe,GACfG,UAAW,IANI1B,wEAoBjB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,CAAiB1B,WAAYG,KAAKY,oBAClC1B,EAAAC,EAAAC,cAACoC,EAAD,CACAtB,eAAgBF,KAAKmB,MAAML,aAE3BT,gBAAiBL,KAAKmB,MAAMD,wBA5BH5B,IAAMC,eCKnBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAClBH,EAAAC,EAAAC,cAAC4C,EAAD,QAEMC,SAASC,eAAe,SDqH5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef0ce47e.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nexport default class Header extends React.PureComponent {\n  render() {\n    return (\n      <header className=\"component-header\">\n        <div className=\"component-header-title\">\n          Gurmukhi Unicode Converter\n        </div>\n      </header>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './ConversionInput.css'\n\n\nexport default class ConversionInput extends React.PureComponent {\n  static propTypes = {\n    textChange: PropTypes.func\n  };\n\n  handleChange = event => {\n    this.props.textChange(event);\n  };\n\n  render() {\n    return (\n      <div class=\"col-md-6\">\n        <div className=\"component-conversion-input\">\n            <textarea onChange={this.handleChange}/>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './ConversionResult.css'\n\nexport default class ConversionResult extends React.PureComponent {\n  render() {\n    return (\n      <div class=\"col-md-6\">\n        <div className=\"component-conversion-result-main-gurbani\">\n        {this.props.outputGurmukhi}\n        <div className=\"component-conversion-result-main-hindi\">\n        {this.props.outputDevnagri}\n        </div>\n        <div className=\"component-conversion-result-english\">\n        {this.props.outputEnglish}\n        </div>\n        <div className=\"component-conversion-result-main-anmol\">\n        {this.props.outputGurmukhi}\n        </div>\n        <div className=\"component-conversion-result-main\">\n        {this.props.outputGurmukhi}\n        </div>\n        <div className=\"component-conversion-result-main-urdu\">\n        {this.props.outputShahmukhi}\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport * as anvaad from 'anvaad-js-gursevak'\nimport Header from './Header'\nimport ConversionInput from './ConversionInput'\nimport ConversionResult from './ConversionResult'\nimport './App.css';\n\nexport default class App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gurmukhiText: \"\",\n      devnagriText: \"\",\n      shahmukhiText: \"\",\n      latinText: \"\",\n    };\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      gurmukhiText: anvaad.unicode(event.target.value),\n      // devnagriText: anvaad.translit(event.target.value, 'devnagri'),\n      shahmukhiText: anvaad.translit(event.target.value, 'shahmukhi'),\n      // englishText: anvaad.translit(event.target.value, 'english'),\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <ConversionInput textChange={this.handleInputChange} />\n        <ConversionResult\n        outputGurmukhi={this.state.gurmukhiText}\n        // outputDevnagri={this.state.devnagriText}\n        outputShahmukhi={this.state.shahmukhiText}\n        // outputEnglish={this.state.englishText}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"guca\">\n    <header className=\"guca-header\">\n    <App />\n    </header>\n  </div>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}